#!/usr/bin/env python

import sys

from fetcher.utils import get_config_dataset, update_datafetcher, \
    uninstall_datafetcher
from fetcher.fetcher import get_dataset, delete_dataset, list_datasets, \
    info_dataset


HELP_MESSAGE = """usage: datafetcher [get dataset-name] [delete dataset-name] [info dataset-name] [update] [list tag]

Fetches all kind of datasets, whatever the format. Without hussle, without hurdle.

Positional arguments:
  get dataset-name        Downloads and saves the dataset files
  delete dataset-name     Deletes the dataset files from the disk
  info dataset-name       Describes the dataset
  update                  Updates datafetcher
  uninstall               Uninstalls datafetcher
  list tag                Lists all the datasets that have a certain tag
"""

args = sys.argv[1:]

if args:
    action = args[0]
    if action not in ["get", "delete", "list", "info", "update", "uninstall"]:
        print("This command `datafetcher {}` does not exist\n".format(action))
        print(HELP_MESSAGE)

    args = args[1:]

    if action in ["update"]:
        update_datafetcher()
    elif action in ["uninstall"]:
        uninstall_datafetcher()
    elif args and action in ["get", "delete", "info"]:
        datasetname = args[0]
        dataset_config = get_config_dataset(datasetname)
        if dataset_config:
            if action == "get":
                get_dataset(dataset_config)
            elif action == "delete":
                delete_dataset(dataset_config)
            elif action == "info":
                info_dataset(dataset_config)
        else:
            print("The dataset `{}` does not exist".format(datasetname))
    elif args and action in ["list"]:
        tag = args[0]
        list_datasets(tag)
    elif not args:
        if action in ["list"]:
            print("A tag is required\n")
            print(HELP_MESSAGE)
        elif action in ["get", "delete", "info"]:
            print("A dataset name is required\n")
            print(HELP_MESSAGE)
    else:
        print(HELP_MESSAGE)
else:
    print(HELP_MESSAGE)
